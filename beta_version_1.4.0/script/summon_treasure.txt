import random
from script.star_light import Star_light

#初始化三种卡池的列表
all_time = []
in_time = []
re_time = []

class Pool_object(object):
    def __init__(self,item,quality="group",prob = "normal"):
        self.item = item
        self.quality = quality
        self.prob = prob



#获取奖池文件
def get_pool():
    global all_time,in_time,re_time
    with open("packs/pool/1st.txt") as file:
        #索引初始化
        index = 0
        #遍历文件1st
        for line in file:
            if index == 0:
                all_time.append(eval(line.rstrip()))
            elif index == 1 or index == 2:
                in_time.append(eval(line.rstrip()))
            index += 1

def summon_quality_list(green,blue,purple,gold):
    if not (green + blue + purple + gold) == 100:
        return "ERROR:NOT100"
    qualist_list = []
    porbs = [green,blue,purple,gold]
    for porb in porbs:
        i = 0
        while i < porb:
            qualist_list.append(porbs.index(porb))
            i += 1
    return qualist_list


def summon_item(target,index):
    #初始化
    #get_pool()
    #获取目标奖池数据
    target_pool = target[index]
    #奖池名称
    pool_name = target_pool[0]
    #初始化品质列表
    quality_list = summon_quality_list(50,40,8,2)
    print(quality_list)
    #按照概率随机一个品质
    result = quality_list[random.randint(0,99)]
    print(result)
    #品质列表
    qualities = ["green","blue","purple","gold"]
    #移除名称以获取全部为奖池对象的列表
    target_pool_objects = target_pool
    target_pool_objects.pop(0)
    #初始化该品质下的所有物品的列表
    final_objects = []
    print(target_pool_objects)
    #查找符合该品质的物品并添加早final_objects中
    for object in target_pool_objects:
        if object.quality == qualities[result]:
            final_objects.append(object)
    print(final_objects)
    #判断如果只有一个那么直接返回该物品
    if len(final_objects) == 1 or len(final_objects) == 0:
        return final_objects[0]
    #随机选取一个物品进行返回
    result = random.randint(0,len(final_objects)-1)
    return final_objects[result]



